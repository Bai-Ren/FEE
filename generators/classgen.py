import fileinput
import sys

if len(sys.argv) != 2 and len(sys.argv) != 3:
	print("Usage: " + sys.argv[0] + " input.csv [code.in]")
	sys.exit()

if sys.argv[1] == '--help':
	print("Usage: " + sys.argv[0] + " input.csv")
	print("")
	print("Generates header and cpp files from input csv files")
	print("")
	print("input.csv : csv used for main generation")
	print("code.in   : optional raw code pasted near top of header file")
	sys.exit()

lineNum = 1

prefix = ""
className = ""
IDName = ""
types = []
cols = []
elements = []

strings = []

def getter (str, type, prototype):
	ans = ""
	if prototype:
		ans = type + " get_" + str + " ();"
	else:
		ans = type + " " + prefix + "get_" + str + " () { return this->" + str + ";}"
	return ans

def setter (str, type, prototype):
	ans = ""
	if prototype:
		ans = "void set_" + str + " (" + type + " arg);"
	else:
		ans = "void " + prefix + "set_" + str + " ( " + type + " arg ) { this->" + str + " = arg;}"
	return ans

hin = open(sys.argv[1], 'r')
line = hin.readline()
while line != "": 
	A = line.split(',')
	if lineNum == 1:
		className = A[0]
		IDName = className + "_ID"
		prefix = className + "::"
		lineNum = lineNum + 1
	elif lineNum == 2:
		for x in A:
			if x.rstrip() == 'string':
				x = 'char const *'
			types.append(x.rstrip())
		lineNum = lineNum + 1
	elif lineNum == 3:
		for x in A:
			cols.append(x.rstrip())
		lineNum = lineNum + 1
	else:
		i = 0
		E = []
		for x in A:
			if types[i] == 'char const *':
				x = "\"" + x + "\""
				strings.append("static const char * " + E[0] + "_" + cols[i] + " = " + x + ";")
				E.append("&" + E[0] + "_" + cols[i])
			else:
				E.append(x)
			i = i+1
		elements.append(E)
	line = hin.readline()

h = open(className + '.h', 'w')
cpp = open(className + '.cpp', 'w')

h.write("//Autogenerated header file for class " + className + "\n\n")

h.write("#pragma once\n\n")

if len(sys.argv) == 3:
	hin = open(sys.argv[2], 'r')
	h.write("//Source " + sys.argv[2] + "\n\n")
	h.write(hin.read())

h.write("//Source " + sys.argv[1] + "\n\n")

h.write("enum " + IDName + "{\n")

firstElem = True
s = ""
for x in elements:
	if firstElem:
		s = "	" + x[0]
		firstElem = False
	else:
		s = "," + s + x[0]
h.write(s)

h.write("\n};")

h.write("\n\nclass " + className + "{\n")

h.write("private:\n")

firstElem = True
for t, n in zip(types, cols):
	if firstElem:
		firstElem = False
	else:
		h.write("\t" + t + " " + n + ";\n")

h.write("\npublic:\n")

s = ""
i = 0
for x in types:
	if i == 0:
		i = i + 1
	elif i == 1:
		s = x + " arg" + str(i)
		i = i + 1
	else:
		s = s + ', ' + x + " arg" + str(i)
		i = i + 1
constructor = className + " (" + s + ")"
h.write ('//\t' + constructor + ';\n')
h.write ('\t' + className + ' (' + IDName + ' arg);\n\n')

firstElem = True
for t, n in zip(types, cols):
	if firstElem:
		firstElem = False
	else:
		h.write("\t" + getter(n, t, True) + "\n")
		h.write("\t" + setter(n, t, True) + "\n")

h.write("};\n")

cpp.write("//Autogenerated code file for class " + className + "\n\n")

cpp.write("#include \"" + className + ".h\"\n\n")

cpp.writelines(strings)

cpp.write("\n\n")

firstElem = True
for t, n in zip(types, cols):
	if firstElem:
		firstElem = False
	else:
		cpp.write(getter(n, t, False) + "\n")
		cpp.write(setter(n, t, False) + "\n")

cpp.write ('\n\n' + prefix + className + ' (' + IDName + ' arg) {\n')
cpp.write ('\tswitch (arg) {\n')
for x in elements:
	cpp.write("\t\tcase " + x[0] + ":\n")
	firstElem = True
	i = 1
	for c in cols:
		if firstElem:
			firstElem = False
		else:
			if types[i] == 'char const *':
				cpp.write("\t\t\tthis->" + c + " = " + x[0] + "_" + cols[i] + ";\n")
			else:
				cpp.write("\t\t\tthis->" + c + " = " + x[i] + ";\n")
			i = i + 1
	cpp.write("\t\t\tbreak;\n")
cpp.write("\t\tdefault:\n\t\t\treturn;\n\t}\n}\n")
